#!/usr/bin/env node
var util = require('util'),
	Path = require('path'),
	fs = require('fs'),
	cluster = require('cluster'),
	utils = require('../lib/utils');


var Util = {
	isDevelop: function() {
		var path = this.getPath('.git/HEAD');
		if (!fs.existsSync(path)) {
			return false;
		}
		
		var body = fs.readFileSync(path, 'utf-8'),
			info = this.parseInfo(body);
		
		return info.ref !== 'refs/heads/master';
	},


	parseInfo: function(body) {
		var o = {},
			lines = body.split(/\n+/);
		lines.forEach(function(line) {
			var parts = line.split(/:/);	
			o[parts[0]] = parts.slice(1).join(':');
		});
		return o;
	},


	getPath: function(path) {
		return Path.normalize(Path.join(__dirname, '../' + path));	
	}
};


var Cluster = {
	start: function() {
		this._start();
		this._watch();
	},


	_start: function() {

		for (var id in cluster.workers) {
			cluster.workers[id].kill();
		}

		var os = require('os');
		for (var i = 0, c = os.cpus().length * 2; i < c; i++) {
			cluster.fork();
		}
		

		cluster.on('exit', function(worker, code, signal) {
			util.log('worker ' + worker.process.pid + ' died');
		});
	},


	_watch: function() {
		var self = this,
			path = Util.getPath('config.js'),
			watcher = fs.watch(path);

		watcher.on('change', function() {
			utils.schedule('start-cluster', function() {
				self._start();	
			}, 2000);
		});
	}

};


var Server = {
	start: function() {
		var server = require('../lib/server'),
			config = require('../config');

		config = this.prepare(config);

		util.log('create server: ' + config.port);
		var app = server(config);
		app.listen(config.port);
	},


	prepare: function(config) {
		var filters = require('../filters');
		config = utils.extend({
			port: 80,
			filters: filters
		}, config);


		var hosts = config.hosts || {};
		var o = {
			appRoot: Util.getPath('app')
		};

		hosts['127.0.0.1'] = hosts['127.0.0.1'] || o;
		hosts['fdserver'] = hosts['fdserver'] || o;

		debug && (config.debug = true);

		return config;
	}
};


var Updater = {
	start: function(fn) {
		var self = this;
		this.getInfo(function(e, info) {
			if (e) {
				util.error('update error:' + e);
				return fn();
			}

			var last = info.list[0],
				version = self.getVersion(),
				shouldUpdate = self.compareVersion(version, last.version) < 0;
			
			shouldUpdate = true;	// for test

			if (shouldUpdate) {
				self.doUpdate(last, fn);
			} else {
				fn();
			}
		});
	},


	getInfo: function(fn) {
		var url = 'http://42.121.109.6:3000/info';
		utils.getUrlContent(url, function(e, chunk) {
			if (e) {
				return fn(e);
			}

			try {
				var info = JSON.parse(chunk.toString());
				fn(null, info);
			} catch (e) {
				fn(e);
			}
		});
	},


	doUpdate: function(last, fn) {
		util.log('updating from: [' + last.url + ']');
		var path = Util.getPath(last.name),
			dir = Util.getPath('');
		
		utils.download(last.url, path, function(e) {
			if (e) {
				util.error('download error ' + e);
				return fn(e);
			}
			
			var unzip = require('../lib/unzip');
			unzip(path, dir, fn);
		});
	},


	getVersion: function() {
		var path = Util.getPath('package.json');
		try {
			var info = fs.readFileSync(path, 'utf-8');
			info = JSON.parse(info);
			return info.version;
		} catch(e) {
			return null;
		}
	},

	
	compareVersion: function(left, right) {
		left = left.split(/\D/),
		right = right.split(/\D/);
		var c = Math.max(left.length, right.length);
		for (var i = 0; i < c; i++) {
			var a = parseInt(left[i]) || 0,
				b = parseInt(right[i]) || 0;
			if (a !== b) {
				return a < b ? -1 : 1;
			}
		}

		return 0;
	}
	
};


var Install = {
	start: function(fn) {
		util.log('installing...');
		var exec = require('child_process').exec;
		exec('npm install', function(error, stdout, stderr) {
			fn();
		});
	},

	check: function() {
		var path = Util.getPath('node_modules');
		return fs.existsSync(path);
	}
};


var args = process.argv.slice(2),
	debug = args.indexOf('-d') !== -1;

util.debug = debug ? util.debug : function() {};

if (!debug && cluster.isMaster) {
	/*
	if (Util.isDevelop()) {
		Cluster.start();
		return;
	}
	*/

	var fn = function() {
		Updater.start(function(e, update) {
			if (update) {
				Install.start(function() {
					Cluster.start();	
				});
			} else {
				Cluster.start();
			}
		});
	};

	if (Install.check()) {
		fn();
	} else {
		Install.start(fn);
	}

} else {
	Server.start();
}

